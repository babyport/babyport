pipeline {
    agent any
    post {
      failure {
        updateGitlabCommitStatus name: 'build', state: 'failed'
      }
      success {
        updateGitlabCommitStatus name: 'build', state: 'success'
      }
      aborted {
        updateGitlabCommitStatus name: 'build', state: 'canceled'
      }
    }
    options {
      gitLabConnection('mygitlab')
    }
    triggers {
        gitlab(triggerOnPush: true, triggerOnMergeRequest: true, branchFilterType: 'All')
    }
    environment {
    	sonarLogin = credentials('sonar')
    }
    stages {
        //Checks repository out to perform maven actions.
        stage('Git Checkout') {
            steps {
                script {
                    git branch: 'main',
                        credentialsId: 'gitLogin',
                        url: '<REPO-URL>'
                }
            }
        }
        //Performs all Junit tests before jar gets build.
        stage('JUnit Tests') {
            steps {
                sh 'mvn test -f $WORKSPACE/pom.xml'
            }

        }
        //Performs integration tests
        stage('Integration Test') {
            steps {
                sh 'mvn verify -DskipUnitTests -f $WORKSPACE/pom.xml'
            }
        }
        //Builds the jar and skips the test because of previous pipeline step.
        stage('Build Maven') {
            steps {
                sh 'mvn package -Dmaven.test.skip=true -f $WORKSPACE/pom.xml'
            }
        }
        //Performs static code analysis with sonarqube hook
        stage('Analyse') {
            steps {
                sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=BabyPortAgent -Dsonar.host.url=<SONAR-URL> -Dsonar.token=$sonarLogin'
                }
        }
        //Deploy build jar in Sandbox
        stage('Deployment') {
            steps {
                sh 'ssh root@<IP> \'systemctl stop babyport-agent.service\''
                sh 'scp $WORKSPACE/target/babyPortAgent-*-jar-with-dependencies.jar root@<IP>:/home/babyport/Desktop/BabyPort/Agent/babyport_agent.jar'
                sh 'scp $WORKSPACE/agent-configuration-end2end.yaml root@<IP>:/home/babyport/Desktop/BabyPort/Agent/agent-configuration.yaml'
                sh 'ssh root@<IP> \'chown -R babyport:babyport /home/babyport/Desktop/BabyPort/Agent/\''
                sh 'ssh root@<IP> \'systemctl start babyport-agent.service\''
            }
        }
        stage('Health probes') {
            steps {
                script {
                    try {
                        sh 'ssh root@<IP> \'systemctl is-active --quiet babyport-agent.service\''
                    }
                    catch (exc) {
                            error("Health probe of agent service failed")
                    }
                }
                build job: 'prod-BabyPort-Agent'
            }
        }
    }   
}
